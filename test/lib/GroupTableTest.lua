---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by yemane.
--- DateTime: 3/5/2023 12:25
---

ACCOUNT_MACRO = 17
ACCOUNT_MACRO_2 = 57
CHARACTER_MACRO = 125
CHARACTER_MACRO_2 = 132

if WoWUnit ~= nil then
  local AreEqual, IsTrue, Replace, IsFalse = WoWUnit.AreEqual, WoWUnit.Exists, WoWUnit.Replace, WoWUnit.IsFalse
  local GroupTableTest = WoWUnit('GroupTable')

  function GroupTableTest:AddGroupTest()
    ---@type GroupTable
    local groupTable = GroupTable:New()
    local index = groupTable:AddGroup()

    AreEqual({{['idMap']={}}}, groupTable:GetGroups())
    AreEqual(1, index)
  end

  function GroupTableTest:DeleteGroupTest()
    ---@type GroupTable
    local groupTable = GroupTable:New()
    groupTable:RemoveGroup(groupTable:AddGroup())

    AreEqual({}, groupTable:GetGroups())
  end

  function GroupTableTest:GetCountTest()
    ---@type GroupTable
    local groupTable = GroupTable:New()
    groupTable:AddGroup()
    groupTable:AddGroup()

    AreEqual(2, groupTable:GetCount())
  end

  function GroupTableTest:GetCountNoGroupsTest()
    ---@type GroupTable
    local groupTable = GroupTable:New()

    AreEqual(0, groupTable:GetCount())
  end

  function GroupTableTest:AddMacroTest()
    ---@type GroupTable
    local groupTable = GroupTable:New()
    local index = groupTable:AddGroup()
    groupTable:AddMacro(index, ACCOUNT_MACRO)

    AreEqual({{ACCOUNT_MACRO, ['idMap']={[ACCOUNT_MACRO]=true}}}, groupTable:GetGroups())
  end

  function GroupTableTest:AddMacroThrowsOutOfBoundsErrorTest()
    ---@type GroupTable
    local groupTable = GroupTable:New()
    local index = groupTable:AddGroup()
    local success, ret = pcall(groupTable.AddMacro, groupTable, index + 1, ACCOUNT_MACRO)

    IsFalse(success)
    IsTrue(string.find(ret, 'index 2 is out of bounds'))
  end

  function GroupTableTest:GetMacroCountTest()
    ---@type GroupTable
    local groupTable = GroupTable:New()
    local index = groupTable:AddGroup()
    groupTable:AddMacro(index, ACCOUNT_MACRO)
    groupTable:AddMacro(index, ACCOUNT_MACRO_2)

    AreEqual(2, groupTable:GetMacroCount(index))
  end

  function GroupTableTest:GetMacroCountNoMacrosTest()
    ---@type GroupTable
    local groupTable = GroupTable:New()
    local index = groupTable:AddGroup()

    AreEqual(0, groupTable:GetMacroCount(index))
  end

  function GroupTableTest:GetMacroCountNoGroupsTest()
    ---@type GroupTable
    local groupTable = GroupTable:New()
    local success, ret = pcall(groupTable.GetMacroCount, groupTable, 1)

    IsFalse(success)
    IsTrue(string.find(ret, 'index 1 is out of bounds'))
  end

  function GroupTableTest:GetMacroCountNilIndexTest()
    ---@type GroupTable
    local groupTable = GroupTable:New()
    local success, ret = pcall(groupTable.GetMacroCount, groupTable, nil)

    IsFalse(success)
    IsTrue(string.find(ret, 'nil index provided'))
  end

  function GroupTableTest:RemoveMacroAtIndexTest()
    ---@type GroupTable
    local groupTable = GroupTable:New()
    local index = groupTable:AddGroup()
    groupTable:AddMacro(index, ACCOUNT_MACRO)
    groupTable:AddMacro(index, ACCOUNT_MACRO_2)
    groupTable:RemoveMacroAtIndex(index, 1)

    AreEqual({{ACCOUNT_MACRO_2, ['idMap']={[ACCOUNT_MACRO_2]=true}}}, groupTable:GetGroups())
  end

  function GroupTableTest:RemoveMacroTest()
    ---@type GroupTable
    local groupTable = GroupTable:New()
    local index = groupTable:AddGroup()
    groupTable:AddMacro(index, ACCOUNT_MACRO)
    groupTable:RemoveMacro(ACCOUNT_MACRO)

    AreEqual({{['idMap']={}}}, groupTable:GetGroups())
  end

  --TODO
  function GroupTableTest:RemoveMacroFromGroupDecrementsAccountMacroTest()
    ---@type GroupTable
    local groupTable = GroupTable:New()
    local index = groupTable:AddGroup()
    groupTable:AddMacro(index, ACCOUNT_MACRO)
    groupTable:AddMacro(index, ACCOUNT_MACRO_2)
    groupTable:RemoveMacroFromGroup(index, ACCOUNT_MACRO)

    AreEqual(ACCOUNT_MACRO_2 - 1, groupTable:GetMacroId(index, 1))
    AreEqual(1, groupTable:GetMacroCount(index))
  end

  function GroupTableTest:RemoveMacroFromGroupDecrementsCharacterMacroTest()
    ---@type GroupTable
    local groupTable = GroupTable:New()
    local index = groupTable:AddGroup()
    groupTable:AddMacro(index, CHARACTER_MACRO)
    groupTable:AddMacro(index, CHARACTER_MACRO_2)
    groupTable:RemoveMacroFromGroup(index, CHARACTER_MACRO)

    AreEqual(CHARACTER_MACRO_2 - 1, groupTable:GetMacroId(index, 1))
    AreEqual(1, groupTable:GetMacroCount(index))
  end

  function GroupTableTest:RemoveMacroFromGroupNoDecrementTest()
    ---@type GroupTable
    local groupTable = GroupTable:New()
    local index = groupTable:AddGroup()
    groupTable:AddMacro(index, ACCOUNT_MACRO)
    groupTable:AddMacro(index, CHARACTER_MACRO)
    groupTable:RemoveMacroFromGroup(index, ACCOUNT_MACRO)

    AreEqual(CHARACTER_MACRO, groupTable:GetMacroId(index, 1))
  end

  function GroupTableTest:GetMacroTest()
    ---@type GroupTable
    local groupTable = GroupTable:New()
    local groupIndex = groupTable:AddGroup()
    local macroIndex = groupTable:AddMacro(groupIndex, ACCOUNT_MACRO)

    AreEqual(ACCOUNT_MACRO, groupTable:GetMacroId(groupIndex, macroIndex))
  end
end